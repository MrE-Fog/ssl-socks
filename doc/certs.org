#+OPTIONS: ^:{}

* openssl生成证书的步骤
** 生成根证书的步骤
    1. 生成CA私钥
    2. 生成CA证书请求
    3. 自签名得到根证书

** 生成证书(服务端/客户端)
    1. 生成私钥
    2. 生成证书请求
    3. 通过CA签得到证书

* 示例

** 首先， 需要在生成证书的目录建立以下的目录和文件, 这些文件和目录在使用CA证书签名其它的证书时或被使用到
#+begin_src
mkdir -p demoCA/newcerts
touch demoCA/index.txt
touch demoCA/serial
echo 01 > demoCA/serial
#+end_src
demoCA/serial 中的数值在生成证书时会依次递增

** 生成自签名x509格式的CA证书
使用 “openssl req” 命令来生成 ca.crt 和 ca.key
#+begin_src
openssl req -new -x509 -days 365 -subj /C=CN/ST=BeiJing/L=BeiJing/O=test/OU=test/CN=yily_ca/emailAddress=yily_101@163.com -keyout ca.key -out ca.crt -extensions v3_ca
#+end_src
上述步骤生成的ca.key是1024bits的RSA公私钥对，　如果希望成密钥长度不为1024bits的RSA公私钥对或者其它类型加密(例如　des, des3, aes128, aes192, aes256)的公私钥对，　则要使用”-newkey”参数来代替”-new“参数

生成的ca.key被加密， 后续使用openssl读写ca.key时都要输入这一密码， 可使用如下的方式来清除ca.key的密码保护
#+begin_src
openssl rsa -in ca.key -out ca.key
#+end_src
默认生成的ca.crt使用PEM格式，　可以使用 “-outform” 参数来指定格式，证书的默认有效期为30天，可以使用”-days“参数来指定有效的天数， 想使用openssl生成一个只能用于签名的证书，即证书的扩展属性：密钥用途，只能用于数字签名, 但是我们一般使用openssl生成证书时，生成的证书都是v1证书，是不带扩展属性的, v1的CA证书有可能会被视作user证书而不是CA证书, 因此要生成v3的证书，
#+begin_src
openssl req -new -x509 -keyout ca.key -out ca.crt -extensions v3_ca
#+end_src
默认使用的config文件是　”/etc/ssl/openssl.cnf”，　”v3_ca“　是其中定义的一个扩展块

** 使用config file来生成证书
可以将上述的DN信息保存在一个文件 “ca.cnf”中使用-config ca.cnf来生成ca.crt 和 ca.key, 参照 /etc/ssl/openssl.cnf
#+begin_src
[req]
prompt = no

distinguished_name = my_ca
default_bits = 2048
input_password = 123456       #根据需要输入密码
output_password = 123456      #根据需要输入密码
x509_extensions = ca_extensions

[my_ca]
countryName = CN
stateOrProvinceName = JiangSu
localityName = SuZhou
organizationName =test
organizationalUnitName = wifi
emailAddress = sven@xxx.com
commonName = ca

#just needed by self signed CA
[ca_extensions]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always
basicConstraints = CA:true
#+end_src
注意在生成CA时， config文件中需要有　“ca_extensions” 块的内容，　这是因为，　CA证书必须带有扩展属性(密钥用途，只能用于数字签名), 只有v3证书才有扩展属性，使用默认的config　file “/etc/ssl/openssl.conf”　时，　其内部声明了x509 v3扩展　”v3_ca”，　因此在使用自定义的config生成CA时，需要自己添加v3扩展的内容, 否则生成的是v1证书，不能 作为CA去签发下级证书

** 生成密钥
为server和client生密钥， 分别以“server”和“client”命名
#+begin_src
openssl genrsa -out server.key 2048
openssl genrsa -out client.key 2048
#+end_src

** 生成证书请求
#+begin_src
openssl req -new -key server.key -out server.csr -subj /C=CN/ST=BeiJing/L=BeiJing/O=test/OU=test/CN=server/emailAddress=yily_101@163.com
openssl req -new -key client.key -out client.csr -subj /C=CN/ST=BeiJing/L=BeiJing/O=test/OU=test/CN=client/emailAddress=yily_101@163.com
#+end_src
生成的“server.csr”和”client.csr”即为证书请求文件， CSR文件必须有CA的签名才可形成证书，和生成ca.crt一样,生成证书请求时，也要求输入country等DN信息，同样可以将这些信息存储在文件中

** 使用根证书来签名证书请求
#+begin_src
openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key
openssl ca -in client.csr -out client.crt -cert ca.crt -keyfile ca.key
#+end_src
生成的 “server.crt” 和 “client.crt”即为x509证书，在使用根证书来签名生成证书时，注意以下几点：
1. 一个证书请求不能被多次签名， demoCA/index.txt中会有记录
2. 进行CA签名获取证书时，需要注意国家、省、单位需要与CA证书相同，否则会报：The countryName field needed to be the same in the CA certificate (cn) and the request (sh)
3. 进行CA签名获取证书时，如果信息完全和已有证书信息相同会报错，即不能生成相同的证书(一般保持commonName不同)，报错信息为：failed to update database TXT_DB error number 2
4. 如出现：unable to access the ./demoCA/newcerts directory 则需要自己建立 demoCA目录或者 修改 /usr/lib/ssl/openssl.cnf 中dir的值

** 合并x509证书文件和密钥钥
有时需要分发证书和密钥, 可以使用 cat 命令将证书和密钥合并到一个　”.pem”　文件中
#+begin_src
cat client.crt client.key > client.pem
cat server.crt server.key > server.pem
#+end_src

** 查看证书和密钥
可以使用openssl　查看x509证书和私钥(对于单独的证书/密钥文件以及同时包含证书和密钥的 “.pem”　文件均能查看)

从.pem查看证书
#+begin_src
openssl x509 -in client.crt -noout -text
#+end_src
从.pem查看密钥
#+begin_src
openssl rsa -in server.pem -noout -text
#+end_src
从.pem分离密钥
#+begin_src
openssl rsa -in server.pem -out pub.key
#+end_src
使用这一方法可以检查文件中是否包含有效的证书或者私钥

openssl 生成的rsa密钥文件包含公钥和私钥对，　使用如下的方式可以从密钥文件或者包含密钥文件的　.pem　文件中提取公钥
#+begin_src
openssl rsa -in ca.key -pubout -out pub.key
#+end_src

** 验证证书有效性
openssl verify 命令对证书的有效性进行验证，verify 指令会沿着证书链一直向上验证，直到一个自签名的CA

在生成证书的示例中，　生成了３组证书：　ca.crt, server.crt, client.crt, 使用　ca 证书验证　server证书和client证书的方法如下：
#+begin_src
openssl verify -CAfile ca.crt server.crt
openssl verify -CAfile ca.crt client.crt
#+end_src
如果返回值为OK, 则说明证书验证成功，示例针对的是只有一层根证书的情况，若存在多级根证书，则验证证书时，需要指定该证书链中的所有证书

** 使用密钥签名／加解密
以前述生成的　client.key　为例(其中包含公私钥), 提取其公钥
#+begin_src
 openssl rsa -in client.key -pubout -out client.pub
#+end_src

*** 使用密钥签名／验证签名 小文件
假设在A/B两端(A拥有公私钥，B拥有公钥)对一个文件进行签名／验证签名

在Ａ端使用私钥签名(生成的　test-A.sig　为签名文件)test-A.txt
#+begin_src
openssl rsautl -sign -inkey client.key -out test-A.sig test-A.txt
#+end_src
A将签名文件test-A.sig　发送给Ｂ端,B端使用公钥验证签名(输出的内容即为原始文件的内容, 可以使用”-out“参数将其输出到指定的文件中去)
#+begin_src
openssl rsautl -verify -pubin -inkey client.pub -in test-A.sig -out test-B.txt
#+end_src
若签名验证成功，　则会生成test-B.txt，　且其内容和　test-A.txt 一致

当然，　也可以使用私钥验证签名(输出的内容即为原始文件tes-A.txt的内容, 可以使用”-out“参数将其输出到指定的文件中去)
#+begin_src
openssl rsautl -verify -inkey client.key -in test-A.sig
#+end_src

*** 使用密钥签名／验证签名 大文件
签名只适用于较小的文件，　若需要对较大的文件进行签名，　则还要使用印章

印章和消息摘要可以对任意长度的消息产生固定长度（16或20个字节）的信息摘要，理论基于单向HASH函数，根据消息摘要无法恢复出原文，所以是安全的；消息原文和消息摘要是一一对应的，所以又被称作指纹

在Ａ端生成文件印章(test-A.dgst　即为印章)
#+begin_src
openssl dgst -out test-A.dgst test-A.txt
#+end_src
在Ａ端使用私钥对印章签名(生成的　test.sig　为签名文件):
#+begin_src
openssl rsautl -sign -inkey client.key -in test-A.dgst -out test-A.sig
#+end_src
A将原始文件test-A.txt和签名后的印章test-A.sig传递给B,在B端使用公钥验证签名后的印章文件　test-A.sig
#+begin_src
openssl rsautl -verify -pubin -inkey client.pub -in test-A.sig -out test-B.dgst
#+end_src
若验证正常，B端会得到印章文件test-B.dgst，且其和test-A.dgst应当一致,在Ｂ端对test-A.txt生成印章　test.dgst
#+begin_src
openssl dgst -out test.dgst test-A.txt
#+end_src
在B端比较test-A.dgst test.dgst，若2者一致，则说明接收到的test-A.txt的确来自A端，且未被篡改

上述步骤可以使用 openssl dgst　的　”-sign“ 和　”-verify“　来简化

在A端利用私钥生成签名后的印章文件
#+begin_src
openssl dgst -sign client.key -out test-A.dgst.sig test-A.txt
#+end_src
A将签名后的印章文件test-A.dgst.sig 和原始文件test-A.txt传递给B, 在B端使用公钥验证签名后的印章文件和源文件
#+begin_src
openssl dgst -verify client.pub -signature test-A.dgst.sig test-A.txt
#+end_src
如果输出　”Verified OK“　则说明签名验证成功.当然，也可以使用私钥验证签名后的印章文件和源文件
#+begin_src
openssl dgst -preverify client.key -signature test-A.dgst.sig test-A.txt
#+end_src

** 使用密钥加／解密文件
假设在A/B两端(A拥有公私钥，B拥有公钥)对一个文件进行加/解密

在B端以公钥加密数据
#+begin_src
openssl rsautl -encrypt -pubin -inkey client.pub -in test-B.txt -out test-B.crp
#+end_src
B将加密后的文件test-B.crp传递给A,在A端以私钥解密数据
#+begin_src
openssl rsautl -decrpt -inkey client.key -in test-B.crp -out test-A.txt
#+end_src
解密成功后，得到的test-A.txt和test-B.txt内容一致,配合使用加密和签名可以保证数据来源的有效性以及数据内容不被泄露和篡改
